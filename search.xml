<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://liuyanjunbj.github.io/2016/12/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[隐藏在计算机软硬件背后的语言]]></title>
      <url>https://liuyanjunbj.github.io/2016/08/10/%E9%9A%90%E8%97%8F%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E8%83%8C%E5%90%8E%E7%9A%84%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<h3 id="第一章-电筒密谈"><a href="#第一章-电筒密谈" class="headerlink" title="第一章 电筒密谈"></a>第一章 电筒密谈</h3><p>从十岁小孩利用手电筒照亮的次数表示26个英文字母，到摩尔斯电码的解释，最后得出任何两种不同的东西经过一定的组合都可以代表任何种类的信息。</p>
<h3 id="第二章编码与组合"><a href="#第二章编码与组合" class="headerlink" title="第二章编码与组合"></a>第二章编码与组合</h3><p>进一步讲解摩尔斯电码的实现原理，每增加一个滴或者嗒，就增加一倍码字数。<br>码字数=2 的“滴”或“嗒”的数目次方</p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信开发系列之认证]]></title>
      <url>https://liuyanjunbj.github.io/2016/08/08/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>最近在做分享领卷，需要微信认证后获取微信用户的个人数据，其中也趟了不过微信的坑。实现效果跟饿了么相同，即微信打开链接首先认证并获取微信用户的个人信息，领卷成功后再次在微信中点击链接显示已经领取过的优惠卷信息。现总结微信认证的实现过程。</p>
<a id="more"></a>
<h3 id="微信开发者官网"><a href="#微信开发者官网" class="headerlink" title="微信开发者官网"></a>微信开发者官网</h3><p><a href="https://mp.weixin.qq.com/wiki/home/index.html" target="_blank" rel="external">微信开发者文档</a></p>
<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><h4 id="生成认证的URL"><a href="#生成认证的URL" class="headerlink" title="生成认证的URL"></a>生成认证的URL</h4><pre><code>
/**
     * 获取微信授权链接
     * @param string $redirect_uri
     * @param string $state
     * @return string
     */
    public static function get_authorize_url($redirect_uri = '', $state = '')
    {
        $redirect_uri = urlencode($redirect_uri);
        $authorize_url = 'https://open.weixin.qq.com/connect/oauth2/authorize';
        $url = $authorize_url . '?appid=' . Config::get('config.weixin_appId') . '&redirect_uri=' . $redirect_uri
            . '&response_type=code&scope=snsapi_userinfo&state=' . $state . '#wechat_redirect';
        Log::info("get_authorize_url", array('authorize_url' => $url));
        return $url;
    }
</code></pre>

<h4 id="通过code换取网页授权access-token"><a href="#通过code换取网页授权access-token" class="headerlink" title="通过code换取网页授权access_token"></a>通过code换取网页授权access_token</h4><p>用户点击同意授权后，页面跳转到redirect_uri 提供的页面，并且携带code 码，实现代码：</p>
<p><pre><code><br>/**</code></pre></p>
<pre><code> * 获取授权token
 * @param string $code
 * @return string
 */
public static function get_authorize_token($code = &apos;&apos;)
{
    $tokenData = &apos;&apos;;
    do {
        $token_url = &quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot; . Config::get(&apos;config.weixin_appId&apos;) .
            &quot;&amp;secret=&quot; . Config::get(&apos;config.weixin_appSecret&apos;) .
            &quot;&amp;code={$code}&amp;grant_type=authorization_code&quot;;
        $token_data = json_decode(Helps::curlHttpGet($token_url), true);
        Log::info(&quot;get_authorize_token&quot;, array(&quot;token_data&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;=&gt;$token_data));
        if (!empty($token_data[&apos;errcode&apos;]))
            break;
        $tokenData = json_encode($token_data);
        Cache::put($token_data[&apos;openid&apos;] . &apos;token&apos;, $token_data[&apos;access_token&apos;], $token_data[&apos;expires_in&apos;] / 60);
        Cache::put($token_data[&apos;openid&apos;] . &apos;refresh&apos;, $token_data[&apos;refresh_token&apos;], Config::get(&apos;config.cacheTime&apos;));
        Log::info(&quot;get_authorize_token&quot;, array(&apos;refresh&gt;&gt;&gt;&gt;&gt;&gt;&apos; =&gt; Cache::get($token_data[&apos;openid&apos;] . &apos;refresh&apos;),
        &apos;token&apos;=&gt;Cache::get($token_data[&apos;openid&apos;] . &apos;token&apos;),&apos;code&apos;=&gt;Cache::get($code)));
    } while (false);
    Log::info(&quot;get_authorize_token&quot;, array(&apos;authorize_token&apos; =&gt; json_decode($tokenData, true)));
    return $tokenData;
}
</code></pre><p></p>
<h4 id="刷新access-token（如果需要）"><a href="#刷新access-token（如果需要）" class="headerlink" title="刷新access_token（如果需要）"></a>刷新access_token（如果需要）</h4><p>由于access_token拥有较短的有效期，当access_token超时后，可以使用refresh_token进行刷新，refresh_token拥有较长的有效期（7天、30天、60天、90天），当refresh_token失效的后，需要用户重新授权。</p>
<p><pre><code><br>/**</code></pre></p>
<pre><code> * 刷新token
 */
public static function refresh_token($openid)
{
    $response = array(&quot;code&quot; =&gt; 0, &apos;msg&apos; =&gt; &apos;ok&apos;, &apos;result&apos; =&gt; array());
    do {
        if (!Cache::has($openid . &apos;refresh&apos;)) {
            $response = array(&quot;code&quot; =&gt; 110017, &apos;msg&apos; =&gt; &apos;openid 失效,请重新认证&apos;, &apos;result&apos; =&gt; array());
            break;
        }
        $refresh_token = Cache::get($openid . &apos;refresh&apos;);
        $url = &apos;https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=&apos; . Config::get(&apos;config.weixin_appId&apos;) .
            &apos;&amp;grant_type=refresh_token&amp;refresh_token=&apos; . $refresh_token;
        $token_data = json_decode(Helps::curlHttpGet($url), true);
        if (!empty($token_data[&apos;errcode&apos;])) {
            $response = array(&quot;code&quot; =&gt; 110018, &apos;msg&apos; =&gt; &apos;invalid code&apos;, &apos;result&apos; =&gt; array());
            break;
        }
        Cache::put($token_data[&apos;openid&apos;] . &apos;token&apos;, $token_data[&apos;access_token&apos;], $token_data[&apos;expires_in&apos;] / 60);
    } while (false);
    return $response;
}
</code></pre><p></p>
<h4 id="拉取用户信息"><a href="#拉取用户信息" class="headerlink" title="拉取用户信息"></a>拉取用户信息</h4><p>如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。</p>
<p><pre><code><br> /**</code></pre></p>
<pre><code> * 获取用户信息
 * @param $lang
 * @param $token
 * @param $openid
 * @return jsonString
 */
public static function userInfoBytoken($token, $openid, $lang = &apos;zh_CN&apos;)
{
    $userInfo = &apos;&apos;;
    do {
        if (empty($token)) {
            break;
        }
        $userInfo_url = &apos;https://api.weixin.qq.com/sns/userinfo?access_token=&apos; . $token
            . &apos;&amp;openid=&apos; . $openid . &apos;&amp;lang=&apos; . $lang;
        Log::info(&quot;userInfoBytoken&quot;, array(&apos;url&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&apos; =&gt; $userInfo_url));
        $userData = json_decode(Helps::curlHttpGet($userInfo_url), true);
        if (!empty($userData[&apos;errcode&apos;]))
            break;
        $userInfo = $userData;
    } while (false);
    Log::info(&quot;userInfoBytoken&quot;, array(&apos;userInfo&apos; =&gt; $userInfo));
    return $userInfo;
}
</code></pre><p></p>
<h4 id="判断是否是微信打开"><a href="#判断是否是微信打开" class="headerlink" title="判断是否是微信打开"></a>判断是否是微信打开</h4><p><pre><code><br>/**</code></pre></p>
<pre><code> * 判断是否是微信打开
 * @return bool
 */
public static function isWechat()
{
    $user_agent = $_SERVER[&apos;HTTP_USER_AGENT&apos;];
    if (strpos($user_agent, &apos;MicroMessenger&apos;) === false) {
        return false;
    }
    return true;
}
</code></pre><p></p>
<h4 id="重大的坑"><a href="#重大的坑" class="headerlink" title="重大的坑"></a>重大的坑</h4><p>以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）。如果整套逻辑在后台做，每次用户请求后台都需要获取用户的openid,但是使用snsapi_base为scope发起的网页授权 会把以snsapi_userinfo为scope发起的网页授权 给替换掉，当求用户信息的时候，会报错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习Mackdown]]></title>
      <url>https://liuyanjunbj.github.io/2016/08/05/%E5%AD%A6%E4%B9%A0Mackdown/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在刚才的导语里提到，Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持 Markdown 语法的编辑器有很多，包括很多网站（例如简书）也支持了 Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。甚至可以利用 CloudApp 这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台 Tumblr，也支持 Mou 这类 Markdown 工具的直接上传。</p>
<a id="more"></a>
<h2 id="Markdown-官方文档"><a href="#Markdown-官方文档" class="headerlink" title="Markdown 官方文档"></a>Markdown 官方文档</h2><p><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">创始人 John Gruber 的 Markdown 语法说明</a><br><a href="http://www.appinn.com/markdown/#link" target="_blank" rel="external">Markdown 中文版语法说明</a></p>
<h2 id="使用-Markdown-的优点"><a href="#使用-Markdown-的优点" class="headerlink" title="使用 Markdown 的优点"></a>使用 Markdown 的优点</h2><ul>
<li>专注你的文字内容而不是排版样式，安心写作。</li>
<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li>
<li>可读、直观、学习成本低。</li>
</ul>
<h2 id="Markdown-语法的简要规则"><a href="#Markdown-语法的简要规则" class="headerlink" title="Markdown 语法的简要规则"></a>Markdown 语法的简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</p>
<ul>
<li># 一级标题</li>
<li>## 二级标题</li>
<li>### 三级标题</li>
</ul>
<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。例如这样只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>
</blockquote>
<h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>插入链接与插入图片的语法很像，区别在一个 !号</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>语法：<br>![Alt text](/path/to/img.jpg)<br>![Alt text](/path/to/img.jpg “Optional title”)</p>
<p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：<br>![Alt text][id]<br>[id]是图片参考的名称，图片参考的定义方式则和连结参考一样：<br>[id]: url/to/image  “Optional title attribute”<br>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的img标签。<br>eg: <img src="\image\searchicon.png" alt="图片案例"></p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>链接为：[]()<br>eg: <a href="http://www.appinn.com/markdown/#link" target="_blank" rel="external">链接案例</a></p>
<h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。<br>eg:  <strong>粗体样例</strong><br>       <em>斜体样例</em>    </p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是我觉得 Markdown 比较累人的地方省略</p>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：</p>
<pre><code> 
public class aaa{

 }
 </code></pre>

<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要三个 * 号，例如：</p>
<hr>
<h3 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>图床工具用来上传图片获取 URL 地址</p>
<ul>
<li><a href="http://droplr.com/" target="_blank" rel="external">Droplr</a></li>
<li><a href="http://www.getcloudapp.com/" target="_blank" rel="external">Cloudapp</a></li>
<li><a href="https://itunes.apple.com/cn/app/yi-xiang/id672522335?mt=12&amp;uo=4" target="_blank" rel="external">ezShare for Mac</a></li>
<li><a href="http://weibotuchuang.sinaapp.com/" target="_blank" rel="external">围脖图床修复计划</a></li>
</ul>
<p>在线好用的Markdown工具，为印象笔记而生</p>
<ul>
<li><a href="http://maxiang.info/" target="_blank" rel="external">马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐</a></li>
</ul>
<h4 id="相关文章阅读"><a href="#相关文章阅读" class="headerlink" title="相关文章阅读"></a>相关文章阅读</h4><ul>
<li><a href="http://jianshu.io/p/qqgjln" target="_blank" rel="external">为什么作家应该用 Markdown 保存自己的文稿</a></li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="external">Markdown写作浅谈</a></li>
<li><a href="http://www.appinn.com/markdown-tools/" target="_blank" rel="external">Markdown 工具补完</a></li>
<li><a href="http://jianshu.io/p/63HYZ6" target="_blank" rel="external">Drafts + Scriptogr.am + Dropbox 打造移动端 Markdown 风格博客</a></li>
<li><a href="http://www.ituring.com.cn/article/23" target="_blank" rel="external">图灵社区，怎样使用Markdown</a></li>
<li><a href="http://news.cnblogs.com/n/139649/" target="_blank" rel="external">为什么我们要学习Markdown的三个理由</a></li>
<li><a href="http://ibuick.me/?p=4093" target="_blank" rel="external">Markdown 语法写作入门指南 by ibuick</a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
